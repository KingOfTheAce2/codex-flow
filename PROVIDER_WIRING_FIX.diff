diff --git a/src/cli/commands/swarm.ts b/src/cli/commands/swarm.ts
index 1234567..abcdefg 100644
--- a/src/cli/commands/swarm.ts
+++ b/src/cli/commands/swarm.ts
@@ -3,6 +3,7 @@ import chalk from 'chalk';
 import inquirer from 'inquirer';
 import { SwarmManager } from '../../core/swarm/SwarmManager';
 import { ConfigManager } from '../../core/config';
+import { ProviderManager } from '../../core/providers/ProviderManager';
 
 export const swarmCommand = new Command('swarm')
   .description('Manage agent swarms');
@@ -23,6 +24,14 @@ swarmCommand
       const configManager = new ConfigManager();
       await configManager.load();
 
+      // Create ProviderManager instance from config
+      const config = configManager.getConfig();
+      const providerManager = new ProviderManager({
+        providers: config.providers,
+        defaultProvider: 'openai',
+        loadBalancing: { enabled: true, strategy: 'round-robin' }
+      });
+
       let swarmObjective = objective;
       
       if (!swarmObjective) {
@@ -41,7 +50,8 @@ swarmCommand
       console.log(chalk.white(`Topology: ${options.topology}`));
       console.log(chalk.white(`Max Agents: ${options.maxAgents}\n`));
 
-      const swarmManager = new SwarmManager(configManager.getConfig());
+      // Pass providerManager instead of raw config
+      const swarmManager = new SwarmManager({ ...config, providerManager });
       
       const swarm = await swarmManager.spawn({
         objective: swarmObjective,

diff --git a/src/core/swarm/SwarmManager.ts b/src/core/swarm/SwarmManager.ts
index 2345678..bcdefgh 100644
--- a/src/core/swarm/SwarmManager.ts
+++ b/src/core/swarm/SwarmManager.ts
@@ -2,6 +2,7 @@ import { EventEmitter } from 'events';
 import { BaseAgent, Task } from '../agents/BaseAgent';
 import { AgentFactory } from '../agents/AgentFactory';
 import { MemoryManager } from '../memory/MemoryManager';
+import { ProviderManager } from '../providers/ProviderManager';
 
 export interface SwarmConfig {
   id: string;
@@ -60,7 +61,11 @@ export class SwarmManager extends EventEmitter {
   constructor(config: any) {
     super();
     this.config = config;
-    this.agentFactory = new AgentFactory(config.providerManager || config.providers);
+    
+    // Ensure providerManager is a ProviderManager instance
+    const providerManager = config.providerManager instanceof ProviderManager 
+      ? config.providerManager 
+      : new ProviderManager({ providers: config.providers || {}, defaultProvider: 'openai' });
+    this.agentFactory = new AgentFactory(providerManager);
     this.memoryManager = new MemoryManager(config.memory || {});
 
     // Set up event handlers